"""Mô tả thay đổi

Revision ID: 341705bffcec
Revises: 5f9d79098c07
Create Date: 2025-10-09 20:36:00.949234

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '341705bffcec'
down_revision: Union[str, Sequence[str], None] = '5f9d79098c07'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_attendances'), table_name='attendances')
    op.drop_table('attendances')
    op.drop_index(op.f('idx_attendance_logs'), table_name='attendance_logs')
    op.drop_table('attendance_logs')
    op.alter_column('course_classes', 'teacher_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('course_classes', 'current_students')
    op.add_column('courses', sa.Column('is_deleted', sa.Boolean(), nullable=True))
    op.alter_column('enrollments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('enrollments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('enrollments_student_id_course_class_id_key'), 'enrollments', type_='unique')
    op.create_index(op.f('ix_enrollments_enrollment_id'), 'enrollments', ['enrollment_id'], unique=False)
    op.drop_constraint(op.f('program_courses_program_id_course_id_semester_no_key'), 'program_courses', type_='unique')
    op.create_unique_constraint('uq_program_course_semester', 'program_courses', ['program_id', 'course_id', 'semester_no'])
    op.create_index(op.f('ix_programs_program_id'), 'programs', ['program_id'], unique=False)
    op.alter_column('rooms', 'camera_stream_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint(op.f('rooms_room_name_key'), 'rooms', type_='unique')
    op.create_index(op.f('ix_rooms_room_id'), 'rooms', ['room_id'], unique=False)
    op.alter_column('schedule_templates', 'room_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index(op.f('ix_schedule_templates_template_id'), 'schedule_templates', ['template_id'], unique=False)
    op.alter_column('schedules', 'room_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('schedules', 'day_of_week',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('schedules', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('schedules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('schedules_course_class_id_day_of_week_period_start_period_e_key'), 'schedules', type_='unique')
    op.create_unique_constraint('unique_schedule_week', 'schedules', ['course_class_id', 'day_of_week', 'period_start', 'period_end', 'week_number'])
    op.alter_column('semesters', 'semester_name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=50),
               nullable=False)
    op.alter_column('semesters', 'start_time',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('semesters', 'end_time',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_semesters_semester_id'), 'semesters', ['semester_id'], unique=False)
    op.create_unique_constraint(None, 'semesters', ['semester_name'])
    op.alter_column('student_faces', 'embedding_vector',
               existing_type=postgresql.BYTEA(),
               nullable=True)
    op.drop_index(op.f('idx_student_faces_faiss_index'), table_name='student_faces')
    op.drop_index(op.f('idx_student_faces_student_id'), table_name='student_faces')
    op.create_index(op.f('ix_student_faces_face_id'), 'student_faces', ['face_id'], unique=False)
    op.create_index(op.f('ix_student_faces_student_id'), 'student_faces', ['student_id'], unique=False)
    op.alter_column('students', 'student_code',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.drop_column('students', 'faces')
    op.alter_column('teachers', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'active'::character varying"))
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('teachers', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'active'::character varying"))
    op.add_column('students', sa.Column('faces', postgresql.BYTEA(), autoincrement=False, nullable=True))
    op.alter_column('students', 'student_code',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.drop_index(op.f('ix_student_faces_student_id'), table_name='student_faces')
    op.drop_index(op.f('ix_student_faces_face_id'), table_name='student_faces')
    op.create_index(op.f('idx_student_faces_student_id'), 'student_faces', ['student_id'], unique=False)
    op.create_index(op.f('idx_student_faces_faiss_index'), 'student_faces', ['faiss_index'], unique=False)
    op.alter_column('student_faces', 'embedding_vector',
               existing_type=postgresql.BYTEA(),
               nullable=False)
    op.drop_constraint(None, 'semesters', type_='unique')
    op.drop_index(op.f('ix_semesters_semester_id'), table_name='semesters')
    op.alter_column('semesters', 'end_time',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('semesters', 'start_time',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('semesters', 'semester_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_constraint('unique_schedule_week', 'schedules', type_='unique')
    op.create_unique_constraint(op.f('schedules_course_class_id_day_of_week_period_start_period_e_key'), 'schedules', ['course_class_id', 'day_of_week', 'period_start', 'period_end', 'week_number'], postgresql_nulls_not_distinct=False)
    op.alter_column('schedules', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('schedules', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('schedules', 'day_of_week',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('schedules', 'room_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_schedule_templates_template_id'), table_name='schedule_templates')
    op.alter_column('schedule_templates', 'room_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_rooms_room_id'), table_name='rooms')
    op.create_unique_constraint(op.f('rooms_room_name_key'), 'rooms', ['room_name'], postgresql_nulls_not_distinct=False)
    op.alter_column('rooms', 'camera_stream_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_index(op.f('ix_programs_program_id'), table_name='programs')
    op.drop_constraint('uq_program_course_semester', 'program_courses', type_='unique')
    op.create_unique_constraint(op.f('program_courses_program_id_course_id_semester_no_key'), 'program_courses', ['program_id', 'course_id', 'semester_no'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_enrollments_enrollment_id'), table_name='enrollments')
    op.create_unique_constraint(op.f('enrollments_student_id_course_class_id_key'), 'enrollments', ['student_id', 'course_class_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('enrollments', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('enrollments', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('courses', 'is_deleted')
    op.add_column('course_classes', sa.Column('current_students', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.alter_column('course_classes', 'teacher_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('attendance_logs',
    sa.Column('log_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('detected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('image_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('face_external_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['schedule_id'], ['schedules.schedule_id'], name=op.f('attendance_logs_schedule_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], name=op.f('attendance_logs_student_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('log_id', name=op.f('attendance_logs_pkey'))
    )
    op.create_index(op.f('idx_attendance_logs'), 'attendance_logs', ['student_id', 'schedule_id', 'date'], unique=False)
    op.create_table('attendances',
    sa.Column('attendance_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('confirmed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('confirmed_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['present'::character varying, 'absent'::character varying, 'late'::character varying]::text[])", name=op.f('attendances_status_check')),
    sa.ForeignKeyConstraint(['confirmed_by'], ['users.user_id'], name=op.f('attendances_confirmed_by_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['schedule_id'], ['schedules.schedule_id'], name=op.f('attendances_schedule_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], name=op.f('attendances_student_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('attendance_id', name=op.f('attendances_pkey')),
    sa.UniqueConstraint('student_id', 'schedule_id', 'date', name=op.f('attendances_student_id_schedule_id_date_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_attendances'), 'attendances', ['student_id', 'date'], unique=False)
    # ### end Alembic commands ###
